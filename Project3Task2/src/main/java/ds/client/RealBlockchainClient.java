package ds.client;

/**
 * Author: JYOTI GIRDHARI KHANCHANDANI (JKHANCHA)
 * Last Modified: 30th October 2024
 *
 * This class implements a client that interacts with a blockchain server over TCP/IP.
 * The client allows users to perform various blockchain operations such as viewing the
 * blockchain status, adding transactions, verifying the chain, corrupting blocks, and
 * repairing the chain. The client sends requests to the server in JSON format and receives
 * responses from the server.
 *
 * The client communicates with the server using sockets and handles user input through a
 * command-line interface (CLI). It supports signing requests via a proxy, but this class
 * itself does not handle key management or signing.
 *
 * Note : This code is generated from assistance with Perplexity AI
 */


import ds.message.RequestMessage;
import ds.message.ResponseMessage;

import java.net.*;
import java.io.*;
import java.util.Scanner;


/**
 * RealBlockchainClient class
 *
 * This class represents a client that interacts with a blockchain server. It allows users to
 * perform various operations on the blockchain by sending requests to the server and processing
 * responses. The operations include viewing blockchain status, adding transactions, verifying
 * chain integrity, corrupting blocks, and repairing corrupted blocks.
 */
public class RealBlockchainClient implements IBlockchainClient {
    private static final String SERVER_ADDRESS = "localhost";
    private static final int SERVER_PORT = 7777;
    private String clientId;

    /**
     * Constructor for RealBlockchainClient.
     *
     * Initializes the client with a unique client ID.
     *
     * @param clientId The unique identifier for this client (usually generated by a proxy).
     */
    public RealBlockchainClient(String clientId) {
        this.clientId = clientId;
    }
    /**
     * Displays the client's public keys (e, n) and client ID.
     *
     * This method is left empty because key display is handled by the proxy in this setup.
     */
    @Override
    public void displayKeys() {
        // This method is now empty as key display is handled by the proxy
    }
    /**
     * Displays the blockchain menu with various options for interacting with the blockchain.
     */
    @Override
    public void displayMenu() {
        System.out.println("\nBlock Chain Menu:");
        System.out.println("0. View basic blockchain status.");
        System.out.println("1. Add a transaction to the blockchain.");
        System.out.println("2. Verify the blockchain.");
        System.out.println("3. View the blockchain.");
        System.out.println("4. Corrupt the chain.");
        System.out.println("5. Hide the corruption by repairing the chain.");
        System.out.println("6. Exit.");
        System.out.print("Enter your choice: ");
    }

    /**
     * Creates a request message based on user input from the menu.
     *
     * This method handles different operations such as adding transactions or corrupting blocks,
     * based on user input. It constructs a `RequestMessage` object that will be sent to the server.
     *
     * @param choice  The user's choice from the menu (operation to perform).
     * @param scanner A Scanner object to read user input from the command line.
     * @return A RequestMessage object containing operation details.
     * @throws Exception If an error occurs during request creation (e.g., invalid input).
     */
    @Override
    public RequestMessage createRequest(int choice, Scanner scanner) throws Exception {
        String data = "";
        int difficulty = 0;

        switch (choice) {
            case 1:
                System.out.print("Enter difficulty > 1: ");
                difficulty = scanner.nextInt();
                scanner.nextLine(); // Consume newline
                System.out.print("Enter transaction: ");
                data = scanner.nextLine();
                break;
            case 4:
                System.out.print("Enter block ID to corrupt: ");
                int blockId = scanner.nextInt();
                scanner.nextLine(); // Consume newline
                System.out.print("Enter new data for the block: ");
                String newData = scanner.nextLine();
                data = blockId + "," + newData;
                break;
            default:
                break;
        }

        return new RequestMessage(choice, data, difficulty, clientId, "", "", "");
    }
    /**
     * Processes the response received from the server and displays it to the user.
     *
     * @param response The ResponseMessage object received from the server containing operation results.
     */
    @Override
    public void processResponse(ResponseMessage response) {
        System.out.println(response.getData());
        if (response.getExecutionTime() > 0) {
            System.out.println("Execution time: " + response.getExecutionTime() + " milliseconds");
        }
    }

    @Override
    public void run() throws Exception {
        try (Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
             Scanner scanner = new Scanner(System.in)) {

            while (true) {
                displayMenu();
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                RequestMessage request = createRequest(choice, scanner);
                out.println(request.toJson());

                String responseJson = in.readLine();
                if (responseJson == null) break; // Handle server disconnection gracefully

                ResponseMessage response = ResponseMessage.fromJson(responseJson);
                processResponse(response);

                if (choice == 6) break; // Exit
            }
        } catch (IOException e) {
            System.out.println("IO Exception: " + e.getMessage());
        }
    }
}

